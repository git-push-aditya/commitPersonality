import { NextResponse, NextRequest } from "next/server";
import axios from "axios";
import { CohereClientV2 } from "cohere-ai";

const cohere = new CohereClientV2({
    token: process.env.CHAT_API_KEY
})

const personalities = new Map<string, unknown>([
    [
        "Conventional Connie",
        {
            Description: "Connie whispers the Conventional Commits spec like a bedtime prayer. She refuses to commit until every word is lowercase, every scope is labeled, and every breaking change is marked with the drama it deserves.",
            oneLine: "The strict librarian of commits who thinks Git is the holy scripture.",
            repoSideEffect: "Opens PRs correcting your grammar.The history looks so polished you’d think it was generated by AI. Future devs love her, but teammates secretly roll their eyes when she corrects “feat” vs. “fix” for the 12th time."
        }
    ],
    [
        "Hotfix Hank",
        {
            Description: "Hank commits like he’s defusing a bomb — sweaty palms, racing heart, and a message that just says “pls work.” If code breaks, you’ll find him muttering “just one more quick fix.”",
            oneLine: "The 3 A.M. hero who saves production with duct tape and vibes.",
            repoSideEffect: "Logs are a battlefield of half-thoughts: “fixed it,” “really fixed it,” “no seriously fixed it.” Nobody knows what happened, but hey — the app runs.",
        }
    ],
    [
        "Verbose Vera",
        {
            Description: "Vera treats every commit like a memoir. She includes the what, why, how, emotional context, and sometimes even what she had for lunch while debugging. Reading her commits is like attending a TED Talk.",
            oneLine: "The Shakespeare of commits who writes sonnets instead of summaries.",
            repoSideEffect: "Future devs have way too much context. The logs are insanely helpful, but you’ll need a coffee refill just to scroll through them."
        }
    ],
    [
        "Amendable Andy",
        {
            Description: "Andy can’t resist rewording commits, squashing them into “masterpieces,” and force-pushing with a smug smile. He believes “git log” should look like an art gallery wall — no rough drafts allowed.",
            oneLine: "The time traveler who edits history like it’s his personal diary.",
            repoSideEffect: "Everything looks flawless, but teammates quietly panic when their branches explode after his rebases. The repo is spotless, but also mildly terrifying."
        }
    ]
]);


export async function POST(req: NextRequest) {
    try {
        const body = await req.json();
        const { gitHubId } = body;

        // fetching commits of the users

        const commits = await fetchCommits({ gitHubId });

        if(commits.length <= 4){
            return NextResponse.json({
                status : "failure",
                payload : {
                    message  : "insufficiant commits."
                }
            },{
                status : 404
            })
        }

        // assining personality from cohere ai

        const personality = await assignPersonality({ commits });

        const yourPersonalitiy = personalities.get(personality);

        //getting a a joke
        const joke = await getSassyJoke({personality : yourPersonalitiy});

        //getting strength vs weekness
        const SWA = await getStrengthVsWeekness({ personality : yourPersonalitiy});
 
        return NextResponse.json({
            status: "success",
            payload: {
                personality,
                yourPersonalitiy,
                joke,
                SWA
            }
        }, {
            status: 200
        })

    } catch (e) {
        console.error("Error occured while fetching commits for the given user");
        console.log(e)
        return NextResponse.json({
            status: "failure",
            payload: "Somewhere a big messup"
        }, {
            status: 500
        })

    }
}


const fetchCommits = async ({ gitHubId }: { gitHubId: string }): Promise<string[]> => {
    const res = await axios.get(`https://api.github.com/users/${gitHubId}/events/public?per_page=40`, {
        headers: {
            'Authorization': `Bearer ${process.env.PAT}`,
            'Accept': 'application/vnd.github+json'
        }
    })

    const rawCommits = res.data;
    const commits: string[] = [];
    for (const el of rawCommits) {
        if (el.type === "PushEvent") {
            for (const commit of el.payload.commits) {
                commits.push(commit.message);
                if (commits.length >= 20) break;
            }
        }
        if (commits.length >= 20) break;
    }

    return commits;
}


const systemMessage = "You are an expert personality classifier for software developers based on their commit history. You are given a list of commit messages from a single GitHub user.  Your task:  - Analyze he commit style, tone, and content.  - Classify the user into exactly ONE of the following personality archetypes:  1) Conventional Connie: Connie whispers the Conventional Commits spec like a bedtime prayer. She refuses to commit until every word is lowercase, every scope is labeled, and every breaking change is marked with the drama it deserves.  2) Hotfix Hank: Hank commits like he’s defusing a bomb — sweaty palms, racing heart, and a message that just says “pls work.” If code breaks, you’ll find him muttering “just one more quick fix.”  3) Verbose Vera: Vera treats every commit like a memoir. She includes the what, why, how, emotional context, and sometimes even what she had for lunch while debugging. Reading her commits is like attending a TED Talk.  4) Amendable Andy: Andy can’t resist rewording commits, squashing them into “masterpieces,” and force-pushing with a smug smile. He believes “git log” should look like an art gallery wall — no rough drafts allowed.  Output rules:  - Return ONLY the personality **name** (exactly as written above, e.g., `Hotfix Hank`).  - Do not explain or justify your reasoning.  - Do not output multiple personalities.  - Always return exactly one of the four names. We are providing most recent commits of the user in the following: \n  "

const assignPersonality = async ({ commits }: { commits: string[] }) => {
    try {
        const response = await cohere.chat({
            model: 'command-a-03-2025',
            messages: [
                {
                    role: "system",
                    content: `${systemMessage}`
                }, {
                    role: "user",
                    content: `user commits are : \n ${commits.join('\n') ?? " "}`
                }
            ],
        });


        return (response.message?.content?.[0] as { text: string })?.text
            ?? "Sorry, I wasn't able to generate a response";

    } catch (e) {
        console.log("could not get the personality");
        console.log(e);
        return "sorry darling"
    }

}


const systemMessageForJoke = "You are a witty, friendly AI tasked with creating a sassy, humorous, and light-hearted joke based on a software developer personality description. Rules: - The input will be a personality description of a developer (e.g., Conventional Connie, Hotfix Hank, Verbose Vera, Amendable Andy). - The joke must relate clearly to the traits, quirks, or habits described in the personality.- Keep it non-offensive, non-racist, and work-appropriate.- Do NOT reference real people.- Output only the joke in one or two concise sentences.- Humor should be clever and tech-oriented, suitable for developers.Note : do not repeat the description you receive, create new stuff.";

const getSassyJoke = async ({ personality }: { personality: unknown }) => {
    try {
        const response = await cohere.chat({
            model: 'command-a-03-2025',
            messages: [
                {
                    role: "system",
                    content: `${systemMessageForJoke}`
                }, {
                    role: "user",
                    content: `users personlity : ${JSON.stringify(personality)}`
                }
            ],
        });

        return (response.message?.content?.[0] as { text: string })?.text
            ?? "Sorry, I wasn't able to generate a response";
    } catch (e) {
        console.error(e);
        return "something"
    }
}



const systemMessageForSAW = "You are a witty, friendly AI tasked with creating a sassy, humorous, and light-hearted strength vs weakness based on a software developer personality description. Rules: - The input will be a personality description of a developer (e.g., Conventional Connie, Hotfix Hank, Verbose Vera, Amendable Andy). - The strength vs weekness must relate clearly to the traits, quirks, or habits described in the personality as if they were superhero in parallel universe.- Keep it non-offensive, non-racist, and work-appropriate.- Do NOT reference real people.- Output only the strength and weekness statements properly structures in one or two concise sentences in each defence.- Humor should be clever and tech-oriented, suitable for developers. Note : do not repeat the description you receive, create new stuff.";



const getStrengthVsWeekness = async ({ personality }: { personality: unknown }) => {
    try {
        const response = await cohere.chat({
            model: 'command-a-03-2025',
            messages: [
                {
                    role: "system",
                    content: `${systemMessageForSAW}`
                }, {
                    role: "user",
                    content: `users personlity : ${JSON.stringify(personality)}`
                }
            ],
        });

        const rawSwa = (response.message?.content?.[0] as { text: string })?.text
            ?? "Sorry, I wasn't able to generate a response";

        const refinedSwa = rawSwa.replace(/\*\*/g, "").replace(/ Weakness:/, "<br />Weakness:");
     
        return refinedSwa;
    } catch (e) {
        console.error(e);
        return "something"
    }
}

